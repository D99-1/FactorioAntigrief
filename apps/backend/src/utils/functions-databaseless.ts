import { ObjectId } from "mongoose"
import cryptoRandomString from "crypto-random-string"
import { ReturnModelType } from "@typegoose/typegoose"
import { BeAnObject, AnyParamConstructor } from "@typegoose/typegoose/lib/types"

/**
 * Used to set the id of the database items, so it's not a 24-char-long hex ObjectID but is readable
 **/
export async function createUniqueId<
	T extends AnyParamConstructor<{ id: string }>
>(collection: ReturnModelType<T, BeAnObject>): Promise<string> {
	for (let i = 0; i < 100; i++) {
		const id = cryptoRandomString({ length: 6, type: "alphanumeric" })
		const existing = await collection.findOne({
			id,
		})
		if (!existing) return id
	}
	// we ran it 100 times, and it still didn't generate an ID. that's an issue, so we are giving up
	throw new Error("Could not generate unique ID")
}

// validate IDs that are visible to users, generated by the function above
export function validateUserString(string: unknown): string is string {
	if (!string) return false
	if (typeof string !== "string") return false // it's not a string so it's obviously wrong
	if (string.length !== 7) return false
	return true
}
